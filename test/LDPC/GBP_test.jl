@testset "LDPC/GBP.jl" begin
    using Oscar, CodingTheory

    # Region graphs
    r1 = Region([1, 5])
    r2 = Region([1, 2, 3])
    r3 = Region([1, 3, 4])
    r4 = Region([1, 2, 4])
    r5 = Region([1, 3], -1)
    r6 = Region([1, 2], -1)
    r7 = Region([1, 4], -1)
    r8 = Region([1], 0)
    push!(r1.subregions, r8)
    push!(r2.subregions, [r5, r6, r8])
    push!(r3.subregions, [r5, r7, r8])
    push!(r4.subregions, [r6, r7, r8])
    push!(r5.subregions, r8)
    push!(r6.subregions, r8)
    push!(r7.subregions, r8)
    push!(r5.ancestors, [r2, r3])
    push!(r6.ancestors, [r2, r4])
    push!(r7.ancestors, [r3, r4])
    push!(r8.ancestors, [r1, r2, r3, r4, r5, r6, r7])
    push!(r5.parents, [r2, r3])
    push!(r6.parents, [r2, r4])
    push!(r7.parents, [r3, r4])
    push!(r8.parents, [r1, r5, r6, r7])
    R1 = RegionGraph([r1, r2, r3, r4, r5, r6, r7, r8])
    R2 = region_graph_from_base_nodes([1, 5], [1, 2, 3], [1, 3, 4], [1, 2, 4])
    # need to write an ==
    @test R1 == R2
    @test is_valid_region_graph(R1)
    @test R1 == remove_zero_overcounting_numbers(R1)

    r1 = Region([1, 2, 4, 5])
    r2 = Region([2, 3, 5, 6])
    r3 = Region([4, 5, 7, 8])
    r4 = Region([5, 6, 8, 9])
    r5 = Region([4, 5], -1)
    r6 = Region([5, 6], 0)
    r7 = Region([2], -1)
    r8 = Region([5], -2)
    r9 = Region([6], -1)
    r10 = Region([8], -1)
    push!(r1.subregions, [r5, r7, r8])
    push!(r2.subregions, [r6, r7, r8, r9])
    push!(r3.subregions, [r5, r8, r10])
    push!(r4.subregions, [r8, r9, r10])
    push!(r5.subregions, r8)
    push!(r6.subregions, r8)
    push!(r5.ancestors, [r1, r3])
    push!(r6.ancestors, r2)
    push!(r7.ancestors, [r1, r2])
    push!(r8.ancestors, [r2, r4, r5, r6])
    push!(r9.ancestors, [r2, r4])
    push!(r10.ancestors, [r3, r4])
    push!(r5.parents, [r1, r3])
    push!(r6.parents, r2)
    push!(r7.parents, [r1, r2])
    push!(r8.parents, [r4, r5, r6])
    push!(r9.parents, [r2, r4])
    push!(r10.parents, [r3, r4])
    R1 = RegionGraph([r1, r2, r3, r4, r5, r6, r7, r8, r9, r10])
    R2 = region_graph_from_base_nodes([[1, 2, 4, 5], [2, 3, 5, 6], [4, 5, 7, 8], [5, 6, 8, 9]])
    # need to write an ==
    @test R1 == R2
    @test is_valid_region_graph(R1)
    @test R1 â‰  remove_zero_overcounting_numbers(R1)

    r1 = Region([1, 2, 4, 5])
    r2 = Region([2, 3, 5, 6])
    r3 = Region([5, 6, 8, 9])
    r4 = Region([4, 5, 7, 8])
    r5 = Region([2, 5], -1)
    r6 = Region([4, 5], -1)
    r7 = Region([5, 6], -1)
    r8 = Region([5, 8], -1)
    push!(r1.subregions, [r5, r6])
    push!(r2.subregions, [r5, r7])
    push!(r3.subregions, [r7, r8])
    push!(r4.subregions, [r8])
    push!(r5.ancesters, [r1, r2])
    push!(r6.ancesters, [r1, r4])
    push!(r7.ancesters, [r2, r3])
    push!(r8.ancesters, [r3, r4])
    push!(r5.parents, [r1, r2])
    push!(r6.parents, [r1, r4])
    push!(r7.parents, [r2, r3])
    push!(r8.parents, [r3, r4])
    R1 = RegionGraph([r1, r2, r3, r4, r5, r6, r7, r8])
    @test !is_valid_region_graph(R1)

    r1 = Region([0, 1, 2, 4])
    r2 = Region([0, 1, 3, 5])
    r3 = Region([0, 2, 3, 6])
    r4 = Region([0, 1], -1)
    r5 = Region([0, 2], -1)
    r6 = Region([0, 3], -1)
    r7 = Region([0], 1)
    push!(r1.subregions, [r4, r5, r7])
    push!(r2.subregions, [r4, r6, r7])
    push!(r3.subregions, [r5, r6, r7])
    push!(r4.ancesters, [r1, r2])
    push!(r5.ancesters, [r1, r3])
    push!(r6.ancesters, [r2, r3])
    push!(r7.ancesters, [r1, r2, r3, r4, r5, r6, r7])
    push!(r4.parents, [r1, r2])
    push!(r5.parents, [r1, r3])
    push!(r6.parents, [r2, r3])
    push!(r7.parents, [r4, r5, r6])
    R1 = RegionGraph([r1, r2, r3, r4, r5, r6, r7])
    R2 = region_graph_from_base_nodes([[0, 1, 2, 4], [0, 1, 3, 5], [0, 2, 3, 6]])
    @test R1 == R2
    @test is_valid_region_graph(R1)
    @test R1 == remove_zero_overcounting_numbers(R1)

end
